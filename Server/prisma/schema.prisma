// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  resident
  officer
  admin
}

enum TransactionType {
  completion
  redemption
  abscondence
}

enum ProductType {
  physical
  digital
}

model User {
  id            Int       @id @default(autoincrement()) @map("User_ID")
  userName      String    @unique @map("User_Name") @db.VarChar(127)
  userRole      UserRole  @default(resident) @map("User_Role")
  profilePicture Bytes?   @map("Profile_Picture")
  passwordHash  String    @map("Password_Hash") @db.VarChar(255)
  biometricHash String?   @map("Biometric_Hash") @db.VarChar(255)
  createdAt     DateTime  @default(now()) @map("Created_At")
  updatedAt     DateTime  @updatedAt @map("Updated_At")

  // Relationships
  resident              Resident?
  officer               Officer?
  transactions          Transaction[] @relation("UserTransactions")
  officerTransactions   Transaction[] @relation("OfficerTransactions")

  @@map("MWH_User")
}

model Resident {
  userId            Int       @id @map("User_ID")
  dateOfBirth       DateTime? @map("Date_Of_Birth")
  dateOfAdmission   DateTime? @default(now()) @map("Date_Of_Admission")
  lastAbscondence   DateTime? @map("Last_Abscondence")
  currentPoints     Int       @default(0) @map("Current_Points")
  totalPoints       Int       @default(0) @map("Total_Points")
  batchNumber       Int?      @map("Batch_Number")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("MWH_Resident")
}

model Officer {
  userId       Int     @id @map("User_ID")
  officerEmail String? @unique @map("Officer_Email") @db.VarChar(127)

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("MWH_Officer")
}

model Category {
  id           Int    @id @default(autoincrement()) @map("Category_ID")
  categoryName String @unique @map("Category_Name") @db.VarChar(30)

  // Relationships
  products           Product[]
  productCategories  ProductCategory[]

  @@map("MWH_Category")
}

model TaskCategory {
  id                    Int     @id @default(autoincrement()) @map("Task_Category_ID")
  taskCategoryName      String  @map("Task_Category_Name") @db.VarChar(50)
  taskCategoryDescription String? @map("Task_Category_Description") @db.VarChar(100)

  // Relationships
  tasks Task[]

  @@map("MWH_Task_Category")
}

model Product {
  id                 Int         @id @default(autoincrement()) @map("Product_ID")
  productName        String      @map("Product_Name") @db.VarChar(31)
  imageUrl           String?     @map("Image_URL")
  productDescription String?     @map("Product_Description")
  points             Int         @default(0) @map("Points")
  productType        ProductType @default(physical) @map("Product_Type")
  available          Boolean     @default(true) @map("Available")
  categoryId         Int?        @map("Category_ID")

  // Relationships
  category          Category?         @relation(fields: [categoryId], references: [id])
  redemptions       Redemption[]
  productCategories ProductCategory[]

  @@index([productName])
  @@index([points])
  @@index([available])
  @@index([categoryId])
  @@map("MWH_Product")
}

model Task {
  id              Int          @id @default(autoincrement()) @map("Task_ID")
  taskCategoryId  Int          @map("Task_Category_ID")
  taskName        String       @map("Task_Name") @db.VarChar(127)
  taskDescription String?      @map("Task_Description")
  points          Int          @default(0) @map("Points")
  active          Boolean      @default(true) @map("Active")

  // Relationships
  taskCategory TaskCategory @relation(fields: [taskCategoryId], references: [id])
  completions  Completion[]

  @@map("MWH_Task")
}

model Transaction {
  id              Int             @id @default(autoincrement()) @map("Transaction_ID")
  transactionDate DateTime        @default(now()) @map("Transaction_Date")
  pointsChange    Int             @map("Points_Change")
  transactionType TransactionType @map("Transaction_Type")
  officerId       Int?            @map("Officer_ID")
  userId          Int             @map("User_ID")

  // Relationships
  user        User         @relation("UserTransactions", fields: [userId], references: [id])
  officer     User?        @relation("OfficerTransactions", fields: [officerId], references: [id])
  redemptions Redemption[]
  completions Completion[]
  abscondence Abscondence?

  @@index([transactionDate])
  @@index([transactionType])
  @@index([userId])
  @@index([officerId])
  @@map("MWH_Transaction")
}

model Redemption {
  transactionId   Int @map("Transaction_ID")
  productId       Int @map("Product_ID")
  productQuantity Int @default(1) @map("Product_Quantity")

  // Relationships
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])

  @@id([transactionId, productId])
  @@map("MWH_Redemption")
}

model Completion {
  transactionId Int @map("Transaction_ID")
  taskId        Int @map("Task_ID")

  // Relationships
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  task        Task        @relation(fields: [taskId], references: [id])

  @@id([transactionId, taskId])
  @@map("MWH_Completion")
}

model Abscondence {
  transactionId Int     @id @map("Transaction_ID")
  reason        String? @map("Reason")

  // Relationships
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("MWH_Abscondence")
}

model ProductCategory {
  productId  Int @map("Product_ID")
  categoryId Int @map("Category_ID")

  // Relationships
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("MWH_Product_Category")
}